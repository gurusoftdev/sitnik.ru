#!/usr/bin/env ruby
# Compile HAML and SASS and copy all files to public/.

require 'pathname'
require 'yaml'
require 'rubygems'

begin
  require 'bundler'
  require 'bundler/setup'
rescue LoadError
  puts 'Bundler not available. Install it with: gem install bundler'
end

require 'haml'
require 'sass'

ROOT    = Pathname.new(__FILE__).dirname.parent.realpath
PUBLIC  = ROOT.join('public')
CONTENT = ROOT.join('content')

def build(options = '')
  `#{Pathname.new(__FILE__).dirname.join('build')} #{options}`
end

def t
  @i18n
end

class Pathname
   def sub_ext(repl)
     ext = File.extname(@path)
     self.class.new(@path.chomp(ext) + repl)
   end
end

class Translation
  def initialize(hash)
    @data = hash
  end
  def method_missing(name, *params)
    value = @data[name.to_s]
    if value.is_a? Hash
      Translation.new(value)
    else
      params.each_with_index { |p, i| value = value.gsub("%#{i+1}", p.to_s) }
      value
    end
  end
end

def production?
  'production' == ARGV.first
end

PUBLIC.rmtree if PUBLIC.exist?
PUBLIC.mkpath

exclude = []

Pathname.glob(CONTENT.join('**/*.haml').to_s) do |haml|
  file = PUBLIC + haml.relative_path_from(CONTENT).sub_ext('')
  file.dirname.mkpath

  if '.i18n' == file.extname
    file = file.sub_ext('')
    Pathname.glob(haml.sub(/\.i18n\.haml$/, '.*.yml').to_s) do |translation|
      exclude << translation
      @lang = translation.sub_ext('').extname.sub(/^./, '')
      @i18n = Translation.new(YAML.load_file(translation))

      File.open(file.sub_ext(".#{@lang}#{file.extname}"), 'w') do |io|
        io << Haml::Engine.new(File.read(haml)).render(self)
      end
    end
  else
    File.open(file, 'w') do |io|
      io << Haml::Engine.new(File.read(haml)).render(self)
    end
  end
end

Pathname.glob(CONTENT.join('**/*').to_s, File::FNM_DOTMATCH) do |from|
  next if from.directory?
  next if '.sass' == from.extname or '.haml' == from.extname
  next if exclude.include? from
  to = PUBLIC + from.relative_path_from(CONTENT)
  to.dirname.mkpath
  begin
    to.make_link(from)
  rescue; end
end

Pathname.glob(PUBLIC.join('**/*.{html,css,js}').to_s) do |file|
  next if file.basename.to_s =~ /^google/
  `gzip --best -c #{file} > #{file}.gz`
end
